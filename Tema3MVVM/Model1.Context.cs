//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tema3MVVM
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;
    using System.Data.SqlClient;

    public partial class SupermarketMVPEntities : DbContext
    {
        public SupermarketMVPEntities()
            : base("name=SupermarketMVPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bon> Bons { get; set; }
        public virtual DbSet<Categorie> Categories { get; set; }
        public virtual DbSet<Producator> Producators { get; set; }
        public virtual DbSet<Produ> Produs { get; set; }
        public virtual DbSet<ProduseVandute> ProduseVandutes { get; set; }
        public virtual DbSet<Stoc> Stocs { get; set; }
        public virtual DbSet<Utilizator> Utilizators { get; set; }
    
        public virtual int DeleteBon(Nullable<int> iDbon)
        {
            var iDbonParameter = iDbon.HasValue ?
                new ObjectParameter("IDbon", iDbon) :
                new ObjectParameter("IDbon", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBon", iDbonParameter);
        }
    
        public virtual int DeleteCategorie(Nullable<int> iDcategorie)
        {
            var iDcategorieParameter = iDcategorie.HasValue ?
                new ObjectParameter("IDcategorie", iDcategorie) :
                new ObjectParameter("IDcategorie", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategorie", iDcategorieParameter);
        }
    
        public virtual int DeleteProducator(Nullable<int> iDproducator)
        {
            var iDproducatorParameter = iDproducator.HasValue ?
                new ObjectParameter("IDproducator", iDproducator) :
                new ObjectParameter("IDproducator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProducator", iDproducatorParameter);
        }
    
        public virtual int DeleteProdus(Nullable<int> iDprodus)
        {
            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProdus", iDprodusParameter);
        }
    
        public virtual int DeleteProduseVandute(Nullable<int> iDbon, Nullable<int> iDprodus)
        {
            var iDbonParameter = iDbon.HasValue ?
                new ObjectParameter("IDbon", iDbon) :
                new ObjectParameter("IDbon", typeof(int));
    
            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduseVandute", iDbonParameter, iDprodusParameter);
        }
    
        public virtual int DeleteStoc(Nullable<int> iDstoc)
        {
            var iDstocParameter = iDstoc.HasValue ?
                new ObjectParameter("IDstoc", iDstoc) :
                new ObjectParameter("IDstoc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStoc", iDstocParameter);
        }
    
        public virtual int DeleteUtilizator(Nullable<int> iDutilizator)
        {
            var iDutilizatorParameter = iDutilizator.HasValue ?
                new ObjectParameter("IDutilizator", iDutilizator) :
                new ObjectParameter("IDutilizator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUtilizator", iDutilizatorParameter);
        }
    
        public virtual int InsertBon(Nullable<System.DateTime> data_eliberare, Nullable<int> iDcasier, Nullable<double> suma_incasa, Nullable<bool> exista)
        {
            var data_eliberareParameter = data_eliberare.HasValue ?
                new ObjectParameter("data_eliberare", data_eliberare) :
                new ObjectParameter("data_eliberare", typeof(System.DateTime));
    
            var iDcasierParameter = iDcasier.HasValue ?
                new ObjectParameter("IDcasier", iDcasier) :
                new ObjectParameter("IDcasier", typeof(int));
    
            var suma_incasaParameter = suma_incasa.HasValue ?
                new ObjectParameter("suma_incasa", suma_incasa) :
                new ObjectParameter("suma_incasa", typeof(double));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBon", data_eliberareParameter, iDcasierParameter, suma_incasaParameter, existaParameter);
        }

        public virtual int InsertCategorie(string nume_categorie, Nullable<bool> exista)
        {
            var nume_categorieParameter = nume_categorie != null ?
                new ObjectParameter("nume_categorie", nume_categorie) :
                new ObjectParameter("nume_categorie", typeof(string));

            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));

            // Since IDcategorie is now an identity column, you don't need to provide its value.
            // Therefore, you can remove it from the ExecuteFunction call.
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCategorie", nume_categorieParameter, existaParameter);
        }


        public virtual int InsertProducator(string nume_producator, string tara_origine, Nullable<bool> exista)
        {
            var nume_producatorParameter = nume_producator != null ?
                new ObjectParameter("nume_producator", nume_producator) :
                new ObjectParameter("nume_producator", typeof(string));
    
            var tara_origineParameter = tara_origine != null ?
                new ObjectParameter("tara_origine", tara_origine) :
                new ObjectParameter("tara_origine", typeof(string));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProducator", nume_producatorParameter, tara_origineParameter, existaParameter);
        }

        public virtual int InsertProdus(string nume_produs, string cod_bare, Nullable<int> iDcategorie, Nullable<int> iDproducator, Nullable<bool> exista)
        {
            var nume_produsParameter = nume_produs != null ?
                new ObjectParameter("nume_produs", nume_produs) :
                new ObjectParameter("nume_produs", typeof(string));

            var cod_bareParameter = cod_bare != null ?
                new ObjectParameter("cod_bare", cod_bare) :
                new ObjectParameter("cod_bare", typeof(string));

            var iDcategorieParameter = iDcategorie.HasValue ?
                new ObjectParameter("IDcategorie", iDcategorie) :
                new ObjectParameter("IDcategorie", typeof(int));

            var iDproducatorParameter = iDproducator.HasValue ?
                new ObjectParameter("IDproducator", iDproducator) :
                new ObjectParameter("IDproducator", typeof(int));

            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProdus", nume_produsParameter, cod_bareParameter, iDcategorieParameter, iDproducatorParameter, existaParameter);
        }


        public virtual int InsertProduseVandute(Nullable<int> iDbon, Nullable<int> iDprodus, Nullable<int> cantitate, Nullable<double> subtotal, Nullable<bool> exista)
        {
            var iDbonParameter = iDbon.HasValue ?
                new ObjectParameter("IDbon", iDbon) :
                new ObjectParameter("IDbon", typeof(int));
    
            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("subtotal", subtotal) :
                new ObjectParameter("subtotal", typeof(double));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduseVandute", iDbonParameter, iDprodusParameter, cantitateParameter, subtotalParameter, existaParameter);
        }
    
        public virtual int InsertStoc(Nullable<int> iDprodus, Nullable<int> cantitate, string unitate_de_masura, Nullable<System.DateTime> data_aprovizionare, Nullable<System.DateTime> data_expirare, Nullable<double> pret_achizitie, Nullable<double> pret_vanzare, Nullable<bool> exista)
        {
            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));
    
            var unitate_de_masuraParameter = unitate_de_masura != null ?
                new ObjectParameter("unitate_de_masura", unitate_de_masura) :
                new ObjectParameter("unitate_de_masura", typeof(string));
    
            var data_aprovizionareParameter = data_aprovizionare.HasValue ?
                new ObjectParameter("data_aprovizionare", data_aprovizionare) :
                new ObjectParameter("data_aprovizionare", typeof(System.DateTime));
    
            var data_expirareParameter = data_expirare.HasValue ?
                new ObjectParameter("data_expirare", data_expirare) :
                new ObjectParameter("data_expirare", typeof(System.DateTime));
    
            var pret_achizitieParameter = pret_achizitie.HasValue ?
                new ObjectParameter("pret_achizitie", pret_achizitie) :
                new ObjectParameter("pret_achizitie", typeof(double));
    
            var pret_vanzareParameter = pret_vanzare.HasValue ?
                new ObjectParameter("pret_vanzare", pret_vanzare) :
                new ObjectParameter("pret_vanzare", typeof(double));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStoc", iDprodusParameter, cantitateParameter, unitate_de_masuraParameter, data_aprovizionareParameter, data_expirareParameter, pret_achizitieParameter, pret_vanzareParameter, existaParameter);
        }
    
        public virtual int InsertUtilizator(string nume_utilizator, string parola, string tip_utilizator, Nullable<bool> exista)
        {
            var nume_utilizatorParameter = nume_utilizator != null ?
                new ObjectParameter("nume_utilizator", nume_utilizator) :
                new ObjectParameter("nume_utilizator", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var tip_utilizatorParameter = tip_utilizator != null ?
                new ObjectParameter("tip_utilizator", tip_utilizator) :
                new ObjectParameter("tip_utilizator", typeof(string));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUtilizator", nume_utilizatorParameter, parolaParameter, tip_utilizatorParameter, existaParameter);
        }
    
        public virtual ObjectResult<SelectAllBonuri_Result> SelectAllBonuri()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllBonuri_Result>("SelectAllBonuri");
        }
    
        public virtual ObjectResult<SelectAllCategorii_Result> SelectAllCategorii()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllCategorii_Result>("SelectAllCategorii");
        }
    
        public virtual ObjectResult<SelectAllProducatori_Result> SelectAllProducatori()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllProducatori_Result>("SelectAllProducatori");
        }
    
        public virtual ObjectResult<SelectAllProduse_Result> SelectAllProduse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllProduse_Result>("SelectAllProduse");
        }
    
        public virtual ObjectResult<SelectAllProduseVandute_Result> SelectAllProduseVandute()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllProduseVandute_Result>("SelectAllProduseVandute");
        }




        string connectionString = "data source=DESKTOP-S8NVOLJ\\SQLEXPRESS;initial catalog=SupermarketMVP;integrated security=True;trustservercertificate=True;MultipleActiveResultSets=True";


        public virtual List<Stoc> SelectAllStoc()
        {
            List<Stoc> stocList = new List<Stoc>();

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    string query = "SELECT * FROM Stoc";
                    SqlCommand command = new SqlCommand(query, connection);
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        Stoc stoc = new Stoc();
                        stoc.IDstoc = Convert.ToInt32(reader["IDstoc"]);
                        stoc.IDprodus = Convert.ToInt32(reader["IDprodus"]);
                        stoc.cantitate = Convert.ToInt32(reader["cantitate"]);
                        stoc.unitate_de_masura = reader["unitate_de_masura"].ToString();
                        stoc.data_aprovizionare = Convert.ToDateTime(reader["data_aprovizionare"]);
                        stoc.data_expirare = Convert.ToDateTime(reader["data_expirare"]);
                        stoc.pret_achizitie = Convert.ToDouble(reader["pret_achizitie"]);
                        stoc.pret_vanzare = Convert.ToDouble(reader["pret_vanzare"]);
                        stoc.exista = Convert.ToBoolean(reader["exista"]);

                        stocList.Add(stoc);
                    }

                    reader.Close();
                }
            }
            catch (Exception ex)
            {
                // Handle exception
                Console.WriteLine("An error occurred: " + ex.Message);
            }

            return stocList;
        }


        public virtual ObjectResult<SelectAllUtilizatori_Result> SelectAllUtilizatori()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllUtilizatori_Result>("SelectAllUtilizatori");
        }
    
        public virtual int UpdateBon(Nullable<int> iDbon, Nullable<System.DateTime> data_eliberare, Nullable<int> iDcasier, Nullable<double> suma_incasa, Nullable<bool> exista)
        {
            var iDbonParameter = iDbon.HasValue ?
                new ObjectParameter("IDbon", iDbon) :
                new ObjectParameter("IDbon", typeof(int));
    
            var data_eliberareParameter = data_eliberare.HasValue ?
                new ObjectParameter("data_eliberare", data_eliberare) :
                new ObjectParameter("data_eliberare", typeof(System.DateTime));
    
            var iDcasierParameter = iDcasier.HasValue ?
                new ObjectParameter("IDcasier", iDcasier) :
                new ObjectParameter("IDcasier", typeof(int));
    
            var suma_incasaParameter = suma_incasa.HasValue ?
                new ObjectParameter("suma_incasa", suma_incasa) :
                new ObjectParameter("suma_incasa", typeof(double));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBon", iDbonParameter, data_eliberareParameter, iDcasierParameter, suma_incasaParameter, existaParameter);
        }
    
        public virtual int UpdateCategorie(Nullable<int> iDcategorie, string nume_categorie, Nullable<bool> exista)
        {
            var iDcategorieParameter = iDcategorie.HasValue ?
                new ObjectParameter("IDcategorie", iDcategorie) :
                new ObjectParameter("IDcategorie", typeof(int));
    
            var nume_categorieParameter = nume_categorie != null ?
                new ObjectParameter("nume_categorie", nume_categorie) :
                new ObjectParameter("nume_categorie", typeof(string));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCategorie", iDcategorieParameter, nume_categorieParameter, existaParameter);
        }
    
        public virtual int UpdateProducator(Nullable<int> iDproducator, string nume_producator, string tara_origine, Nullable<bool> exista)
        {
            var iDproducatorParameter = iDproducator.HasValue ?
                new ObjectParameter("IDproducator", iDproducator) :
                new ObjectParameter("IDproducator", typeof(int));
    
            var nume_producatorParameter = nume_producator != null ?
                new ObjectParameter("nume_producator", nume_producator) :
                new ObjectParameter("nume_producator", typeof(string));
    
            var tara_origineParameter = tara_origine != null ?
                new ObjectParameter("tara_origine", tara_origine) :
                new ObjectParameter("tara_origine", typeof(string));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProducator", iDproducatorParameter, nume_producatorParameter, tara_origineParameter, existaParameter);
        }
    
        public virtual int UpdateProdus(Nullable<int> iDprodus, string nume_produs, string cod_bare, Nullable<int> iDcategorie, Nullable<int> iDproducator, Nullable<bool> exista)
        {
            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));
    
            var nume_produsParameter = nume_produs != null ?
                new ObjectParameter("nume_produs", nume_produs) :
                new ObjectParameter("nume_produs", typeof(string));
    
            var cod_bareParameter = cod_bare != null ?
                new ObjectParameter("cod_bare", cod_bare) :
                new ObjectParameter("cod_bare", typeof(string));
    
            var iDcategorieParameter = iDcategorie.HasValue ?
                new ObjectParameter("IDcategorie", iDcategorie) :
                new ObjectParameter("IDcategorie", typeof(int));
    
            var iDproducatorParameter = iDproducator.HasValue ?
                new ObjectParameter("IDproducator", iDproducator) :
                new ObjectParameter("IDproducator", typeof(int));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProdus", iDprodusParameter, nume_produsParameter, cod_bareParameter, iDcategorieParameter, iDproducatorParameter, existaParameter);
        }

        public virtual int UpdateProduseVandute(Nullable<int> iDbon, Nullable<int> iDprodus, Nullable<int> cantitate, Nullable<double> subtotal, Nullable<bool> exista)
        {
            var iDbonParameter = iDbon.HasValue ?
                new ObjectParameter("IDbon", iDbon) :
                new ObjectParameter("IDbon", typeof(int));

            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));

            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));

            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("subtotal", subtotal) :
                new ObjectParameter("subtotal", typeof(double));

            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduseVandute", iDbonParameter, iDprodusParameter, cantitateParameter, subtotalParameter, existaParameter);
        }


        public virtual int UpdateStoc(Nullable<int> iDstoc, Nullable<int> iDprodus, Nullable<int> cantitate, string unitate_de_masura, Nullable<System.DateTime> data_aprovizionare, Nullable<System.DateTime> data_expirare, Nullable<double> pret_achizitie, Nullable<double> pret_vanzare, Nullable<bool> exista)
        {
            var iDstocParameter = iDstoc.HasValue ?
                new ObjectParameter("IDstoc", iDstoc) :
                new ObjectParameter("IDstoc", typeof(int));

            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));

            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));

            var unitate_de_masuraParameter = unitate_de_masura != null ?
                new ObjectParameter("unitate_de_masura", unitate_de_masura) :
                new ObjectParameter("unitate_de_masura", typeof(string));

            var data_aprovizionareParameter = data_aprovizionare.HasValue ?
                new ObjectParameter("data_aprovizionare", data_aprovizionare) :
                new ObjectParameter("data_aprovizionare", typeof(System.DateTime));

            var data_expirareParameter = data_expirare.HasValue ?
                new ObjectParameter("data_expirare", data_expirare) :
                new ObjectParameter("data_expirare", typeof(System.DateTime));

            var pret_achizitieParameter = pret_achizitie.HasValue ?
                new ObjectParameter("pret_achizitie", pret_achizitie) :
                new ObjectParameter("pret_achizitie", typeof(double));

            var pret_vanzareParameter = pret_vanzare.HasValue ?
                new ObjectParameter("pret_vanzare", pret_vanzare) :
                new ObjectParameter("pret_vanzare", typeof(double));

            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStoc", iDstocParameter, iDprodusParameter, cantitateParameter, unitate_de_masuraParameter, data_aprovizionareParameter, data_expirareParameter, pret_achizitieParameter, pret_vanzareParameter, existaParameter);
        }


        public virtual int UpdateUtilizator(Nullable<int> iDutilizator, string nume_utilizator, string parola, string tip_utilizator, Nullable<bool> exista)
        {
            var iDutilizatorParameter = iDutilizator.HasValue ?
                new ObjectParameter("IDutilizator", iDutilizator) :
                new ObjectParameter("IDutilizator", typeof(int));
    
            var nume_utilizatorParameter = nume_utilizator != null ?
                new ObjectParameter("nume_utilizator", nume_utilizator) :
                new ObjectParameter("nume_utilizator", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var tip_utilizatorParameter = tip_utilizator != null ?
                new ObjectParameter("tip_utilizator", tip_utilizator) :
                new ObjectParameter("tip_utilizator", typeof(string));
    
            var existaParameter = exista.HasValue ?
                new ObjectParameter("exista", exista) :
                new ObjectParameter("exista", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUtilizator", iDutilizatorParameter, nume_utilizatorParameter, parolaParameter, tip_utilizatorParameter, existaParameter);
        }
    
        public virtual int GetPretAchizitieByIdProdus(Nullable<int> iDprodus)
        {
            var iDprodusParameter = iDprodus.HasValue ?
                new ObjectParameter("IDprodus", iDprodus) :
                new ObjectParameter("IDprodus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPretAchizitieByIdProdus", iDprodusParameter);
        }
    }
}
